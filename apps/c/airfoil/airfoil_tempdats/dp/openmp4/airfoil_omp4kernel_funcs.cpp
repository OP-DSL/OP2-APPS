//
// auto-generated by op2.py
//

// global constants
double gam_ompkernel;
double gm1_ompkernel;
double cfl_ompkernel;
double eps_ompkernel;
double mach_ompkernel;
double alpha_ompkernel;
double qinf_ompkernel[4];

// header
#include "op_lib_cpp.h"


void op_decl_const_gam(int dim, char const *type,
                       double *dat){
  memcpy(&gam_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:gam_ompkernel)
}

void op_decl_const_gm1(int dim, char const *type,
                       double *dat){
  memcpy(&gm1_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:gm1_ompkernel)
}

void op_decl_const_cfl(int dim, char const *type,
                       double *dat){
  memcpy(&cfl_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:cfl_ompkernel)
}

void op_decl_const_eps(int dim, char const *type,
                       double *dat){
  memcpy(&eps_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:eps_ompkernel)
}

void op_decl_const_mach(int dim, char const *type,
                       double *dat){
  memcpy(&mach_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:mach_ompkernel)
}

void op_decl_const_alpha(int dim, char const *type,
                       double *dat){
  memcpy(&alpha_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:alpha_ompkernel)
}

void op_decl_const_qinf(int dim, char const *type,
                       double *dat){
  memcpy(qinf_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:qinf_ompkernel[:4])
}

// user kernel files
#include "save_soln_omp4kernel_func.cpp"
#include "adt_calc_omp4kernel_func.cpp"
#include "res_calc_omp4kernel_func.cpp"
#include "bres_calc_omp4kernel_func.cpp"
#include "update_omp4kernel_func.cpp"
