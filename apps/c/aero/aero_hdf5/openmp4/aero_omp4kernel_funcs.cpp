//
// auto-generated by op2.py
//

// global constants
double gam_ompkernel;
double gm1_ompkernel;
double gm1i_ompkernel;
double m2_ompkernel;
double wtg1_ompkernel[2];
double xi1_ompkernel[2];
double Ng1_ompkernel[4];
double Ng1_xi_ompkernel[4];
double wtg2_ompkernel[4];
double Ng2_ompkernel[16];
double Ng2_xi_ompkernel[32];
double minf_ompkernel;
double freq_ompkernel;
double kappa_ompkernel;
double nmode_ompkernel;
double mfan_ompkernel;

// header
#include "op_lib_cpp.h"


void op_decl_const_gam(int dim, char const *type,
                       double *dat){
  memcpy(&gam_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:gam_ompkernel)
}

void op_decl_const_gm1(int dim, char const *type,
                       double *dat){
  memcpy(&gm1_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:gm1_ompkernel)
}

void op_decl_const_gm1i(int dim, char const *type,
                       double *dat){
  memcpy(&gm1i_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:gm1i_ompkernel)
}

void op_decl_const_m2(int dim, char const *type,
                       double *dat){
  memcpy(&m2_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:m2_ompkernel)
}

void op_decl_const_wtg1(int dim, char const *type,
                       double *dat){
  memcpy(wtg1_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:wtg1_ompkernel[:2])
}

void op_decl_const_xi1(int dim, char const *type,
                       double *dat){
  memcpy(xi1_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:xi1_ompkernel[:2])
}

void op_decl_const_Ng1(int dim, char const *type,
                       double *dat){
  memcpy(Ng1_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:Ng1_ompkernel[:4])
}

void op_decl_const_Ng1_xi(int dim, char const *type,
                       double *dat){
  memcpy(Ng1_xi_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:Ng1_xi_ompkernel[:4])
}

void op_decl_const_wtg2(int dim, char const *type,
                       double *dat){
  memcpy(wtg2_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:wtg2_ompkernel[:4])
}

void op_decl_const_Ng2(int dim, char const *type,
                       double *dat){
  memcpy(Ng2_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:Ng2_ompkernel[:16])
}

void op_decl_const_Ng2_xi(int dim, char const *type,
                       double *dat){
  memcpy(Ng2_xi_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:Ng2_xi_ompkernel[:32])
}

void op_decl_const_minf(int dim, char const *type,
                       double *dat){
  memcpy(&minf_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:minf_ompkernel)
}

void op_decl_const_freq(int dim, char const *type,
                       double *dat){
  memcpy(&freq_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:freq_ompkernel)
}

void op_decl_const_kappa(int dim, char const *type,
                       double *dat){
  memcpy(&kappa_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:kappa_ompkernel)
}

void op_decl_const_nmode(int dim, char const *type,
                       double *dat){
  memcpy(&nmode_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:nmode_ompkernel)
}

void op_decl_const_mfan(int dim, char const *type,
                       double *dat){
  memcpy(&mfan_ompkernel, dat, dim*sizeof(double));
  #pragma omp target enter data map(to:mfan_ompkernel)
}

// user kernel files
#include "res_calc_omp4kernel_func.cpp"
#include "dirichlet_omp4kernel_func.cpp"
#include "init_cg_omp4kernel_func.cpp"
#include "spMV_omp4kernel_func.cpp"
#include "dotPV_omp4kernel_func.cpp"
#include "updateUR_omp4kernel_func.cpp"
#include "dotR_omp4kernel_func.cpp"
#include "updateP_omp4kernel_func.cpp"
#include "update_omp4kernel_func.cpp"
